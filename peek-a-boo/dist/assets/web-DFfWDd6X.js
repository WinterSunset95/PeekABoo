import{W as F,as as o,at as p,au as l,av as w,aw as u,ax as f,ay as Q,az as g,aA as D,aB as y,aC as P,aD as M,aE as W,aF as v,aG as A,aH as h,aI as C,aJ as m,aK as N,aL as L,aM as B,aN as k,aO as G,aP as x,aQ as E,aR as I,aS as S,aT as R}from"./index-o9N3nsFK.js";class H extends F{constructor(){super(...arguments),this.unsubscribesMap=new Map}async addDocument(e){const t=o(),{reference:r,data:a}=e,s=await p(l(t,r),a);return{reference:{id:s.id,path:s.path}}}async setDocument(e){const t=o(),{reference:r,data:a,merge:s}=e;await w(u(t,r),a,{merge:s})}async getDocument(e){const t=o(),{reference:r}=e,a=await f(u(t,r)),s=a.data();return{snapshot:{id:a.id,path:a.ref.path,data:s===void 0?null:s,metadata:{hasPendingWrites:a.metadata.hasPendingWrites,fromCache:a.metadata.fromCache}}}}async updateDocument(e){const t=o(),{reference:r,data:a}=e;await Q(u(t,r),a)}async deleteDocument(e){const t=o(),{reference:r}=e;await g(u(t,r))}async writeBatch(e){const t=o(),{operations:r}=e,a=D(t);for(const s of r){const{type:n,reference:c,data:i,options:d}=s,b=u(t,c);switch(n){case"set":a.set(b,i,d!=null?d:{});break;case"update":a.update(b,i!=null?i:{});break;case"delete":a.delete(b);break}}await a.commit()}async getCollection(e){const t=await this.buildCollectionQuery(e,"collection");return{snapshots:(await y(t)).docs.map(a=>({id:a.id,path:a.ref.path,data:a.data(),metadata:{hasPendingWrites:a.metadata.hasPendingWrites,fromCache:a.metadata.fromCache}}))}}async getCollectionGroup(e){const t=await this.buildCollectionQuery(e,"collectionGroup");return{snapshots:(await y(t)).docs.map(a=>({id:a.id,path:a.ref.path,data:a.data(),metadata:{hasPendingWrites:a.metadata.hasPendingWrites,fromCache:a.metadata.fromCache}}))}}async getCountFromServer(e){const t=o(),{reference:r}=e,a=l(t,r);return{count:(await P(a)).data().count}}async clearPersistence(){const e=o();await M(e)}async enableNetwork(){const e=o();await W(e)}async disableNetwork(){const e=o();await v(e)}async useEmulator(e){const t=o(),r=e.port||8080;A(t,e.host,r)}async addDocumentSnapshotListener(e,t){const r=o(),a=h(u(r,e.reference),{includeMetadataChanges:e.includeMetadataChanges,source:e.source},n=>{const c=n.data(),i={snapshot:{id:n.id,path:n.ref.path,data:c===void 0?null:c,metadata:{hasPendingWrites:n.metadata.hasPendingWrites,fromCache:n.metadata.fromCache}}};t(i,void 0)},n=>t(null,n)),s=Date.now().toString();return this.unsubscribesMap.set(s,a),s}async addCollectionSnapshotListener(e,t){const r=await this.buildCollectionQuery(e,"collection"),a=h(r,{includeMetadataChanges:e.includeMetadataChanges,source:e.source},n=>{const c={snapshots:n.docs.map(i=>({id:i.id,path:i.ref.path,data:i.data(),metadata:{hasPendingWrites:i.metadata.hasPendingWrites,fromCache:i.metadata.fromCache}}))};t(c,void 0)},n=>t(null,n)),s=Date.now().toString();return this.unsubscribesMap.set(s,a),s}async addCollectionGroupSnapshotListener(e,t){const r=await this.buildCollectionQuery(e,"collectionGroup"),a=h(r,{includeMetadataChanges:e.includeMetadataChanges,source:e.source},n=>{const c={snapshots:n.docs.map(i=>({id:i.id,path:i.ref.path,data:i.data(),metadata:{hasPendingWrites:i.metadata.hasPendingWrites,fromCache:i.metadata.fromCache}}))};t(c,void 0)},n=>t(null,n)),s=Date.now().toString();return this.unsubscribesMap.set(s,a),s}async removeSnapshotListener(e){const t=this.unsubscribesMap.get(e.callbackId);t&&(t(),this.unsubscribesMap.delete(e.callbackId))}async removeAllListeners(){this.unsubscribesMap.forEach(e=>e()),this.unsubscribesMap.clear(),await super.removeAllListeners()}async buildCollectionQuery(e,t){const r=o();let a;if(e.compositeFilter){const s=this.buildFirebaseQueryCompositeFilterConstraint(e.compositeFilter),n=await this.buildFirebaseQueryNonFilterConstraints(e.queryConstraints||[]);a=C(t==="collection"?l(r,e.reference):m(r,e.reference),s,...n)}else{const s=await this.buildFirebaseQueryConstraints(e.queryConstraints||[]);a=C(t==="collection"?l(r,e.reference):m(r,e.reference),...s)}return a}buildFirebaseQueryCompositeFilterConstraint(e){const t=this.buildFirebaseQueryFilterConstraints(e.queryConstraints);return e.type==="and"?N(...t):L(...t)}buildFirebaseQueryFilterConstraints(e){const t=[];for(const r of e){const a=this.buildFirebaseQueryFilterConstraint(r);t.push(a)}return t}buildFirebaseQueryFilterConstraint(e){return e.type==="where"?this.buildFirebaseQueryFieldFilterConstraint(e):this.buildFirebaseQueryCompositeFilterConstraint(e)}buildFirebaseQueryFieldFilterConstraint(e){return B(e.fieldPath,e.opStr,e.value)}async buildFirebaseQueryNonFilterConstraints(e){const t=[];for(const r of e){const a=await this.buildFirebaseQueryNonFilterConstraint(r);t.push(a)}return t}async buildFirebaseQueryNonFilterConstraint(e){switch(e.type){case"orderBy":return R(e.fieldPath,e.directionStr);case"limit":return S(e.limit);case"limitToLast":return I(e.limit);case"startAt":case"startAfter":case"endAt":case"endBefore":{const t=o(),r=await f(u(t,e.reference));switch(e.type){case"startAt":return E(r);case"startAfter":return x(r);case"endAt":return G(r);case"endBefore":return k(r)}}}}async buildFirebaseQueryConstraints(e){const t=[];for(const r of e){const a=await this.buildFirebaseQueryConstraint(r);t.push(a)}return t}async buildFirebaseQueryConstraint(e){return e.type==="where"?this.buildFirebaseQueryFieldFilterConstraint(e):await this.buildFirebaseQueryNonFilterConstraint(e)}}export{H as FirebaseFirestoreWeb};
