System.register(["./index-legacy-IwLPgopo.js"],(function(t,e){"use strict";var a,n,o,c,s,d,i,r,l,m;return{setters:[t=>{a=t.W,n=t.o,o=t.q,c=t.t,s=t.u,d=t.v,i=t.x,r=t.y,l=t.z,m=t.A}],execute:function(){class e extends a{async deleteFile(t){const e=n(),a=o(e,t.path);await c(a)}async getDownloadUrl(t){const e=n(),a=o(e,t.path);return{downloadUrl:await s(a)}}async getMetadata(t){const e=n(),a=o(e,t.path),c=await d(a),s={bucket:c.bucket,createdAt:new Date(c.timeCreated).getTime(),generation:c.generation,metadataGeneration:c.metageneration,name:c.name,path:c.fullPath,size:c.size,updatedAt:new Date(c.updated).getTime(),cacheControl:c.cacheControl,contentDisposition:c.contentDisposition,contentEncoding:c.contentEncoding,contentLanguage:c.contentLanguage,contentType:c.contentType,customMetadata:c.customMetadata};return c.md5Hash&&(s.md5Hash=c.md5Hash),s}async listFiles(t){const e=n(),a=o(e,t.path),c={maxResults:t.maxResults,pageToken:t.pageToken},s=await i(a,c),d={items:s.items.map((t=>({bucket:t.bucket,name:t.name,path:t.fullPath})))};return s.nextPageToken&&(d.nextPageToken=s.nextPageToken),d}async updateMetadata(t){const e=n(),a=o(e,t.path),c={cacheControl:t.metadata.cacheControl,contentDisposition:t.metadata.contentDisposition,contentEncoding:t.metadata.contentEncoding,contentLanguage:t.metadata.contentLanguage,contentType:t.metadata.contentType,customMetadata:t.metadata.customMetadata};await r(a,c)}async uploadFile(t,a){if(!t.blob)throw new Error(e.ERROR_BLOB_MISSING);const c=n(),s=o(c,t.path);let d;t.metadata&&(d={cacheControl:t.metadata.cacheControl,contentDisposition:t.metadata.contentDisposition,contentEncoding:t.metadata.contentEncoding,contentLanguage:t.metadata.contentLanguage,contentType:t.metadata.contentType,md5Hash:t.metadata.md5Hash,customMetadata:t.metadata.customMetadata});const i=l(s,t.blob,d);return i.on("state_changed",{next:t=>{const e=this.createUploadFileCallbackEvent(t);a(e,void 0)},error:t=>{a(null,t)},complete:()=>{const t=this.createUploadFileCallbackEvent(i.snapshot);a(t,void 0)}}),Date.now().toString()}async useEmulator(t){const e=n(),a=t.port||9199;m(e,t.host,a)}createUploadFileCallbackEvent(t){return{progress:t.bytesTransferred/t.totalBytes,bytesTransferred:t.bytesTransferred,totalBytes:t.totalBytes,completed:"success"===t.state}}}t("FirebaseStorageWeb",e),e.ERROR_BLOB_MISSING="blob must be provided."}}}));
